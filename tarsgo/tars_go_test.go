package TestApp

import (
	"TarsCloud/TarsGo/tars"
	"fmt"
	"testing"
)

var data = ""

func init() {
	for i := 0; i < 1024; i++ {
		data = data + "0"
	}
}

type HelloImp struct {
}

//implete the Test interface
func (imp *HelloImp) Test() (int32, error) {
	return 0, nil
}

//implete the testHello interface

func (imp *HelloImp) TestHello(in string, out *string) (int32, error) {
	*out
	return 0, nil
}

func TestServer(t *testing.T) {
	imp := new(HelloImp)
	app := new(Hello)
	app.AddServant(imp, "HelloObj") //Register Servant
	fmt.Println("exeu run")
	tars.Run()
}

func TestClient(t *testing.T) {
	comm := tars.NewCommunicator()
	obj := "TestApp.TestServer.HelloObj@tcp -h 127.0.0.1 -p 50000 -t 60000"
	app := new(Hello)
	comm.StringToProxy(obj, app)
	var req = data
	var res string
	var out string
	ret, err := app.TestHello(req, &out)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(ret, out, res)
}

func BenchmarkClient(b *testing.B) {
	comm := tars.NewCommunicator()
	obj := "TestApp.TestServer.HelloObj@tcp -h 127.0.0.1 -p 50000 -t 60000"
	app := new(Hello)
	comm.StringToProxy(obj, app)
	var req
	var out string

	for i := 0; i < b.N; i++ {
		_, err := app.TestHello(req, &out)
		if err != nil {
			fmt.Println(err)
			return
		}
	}
}
